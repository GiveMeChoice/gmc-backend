apiVersion: apps/v1
kind: Deployment
metadata:
  name: gmc-k8s-deployment
spec:
  selector:
    matchLabels:
      app: gmc-backend-integration
  replicas: 1
  template:
    metadata:
      labels:
        app: gmc-backend-integration
    spec:
      serviceAccountName: gmc-k8s-ksa
      # [END cloud_sql_proxy_k8s_sa]

      # [START cloud_sql_proxy_k8s_secrets]
      containers:
        - name: provider-integration
          image: us-central1-docker.pkg.dev/gmc-torino/gmc-torino-repo/provider-integration:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 5001
          resources:
            limits:
              memory: '512Mi'
              cpu: '500m'
          env:
            - name: PI_INDEX_BATCH_SIZE
              valueFrom:
                secretKeyRef:
                  name: pi-index-batch-size
                  key: data
            - name: AWS_ID
              valueFrom:
                secretKeyRef:
                  name: aws-id
                  key: data
            - name: AWS_SECRET
              valueFrom:
                secretKeyRef:
                  name: aws-secret
                  key: data
            - name: RAINFOREST_API_KEY
              valueFrom:
                secretKeyRef:
                  name: rainforest-api-key
                  key: data
            - name: KELKOO_API_KEY
              valueFrom:
                secretKeyRef:
                  name: kelkoo-api-key
                  key: data
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: db-host
                  key: data
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-user
                  key: data
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: data
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: db-name
                  key: data
            - name: RABBITMQ_URI
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-uri
                  key: data
            - name: ELASTIC_USER
              valueFrom:
                secretKeyRef:
                  name: elastic-user
                  key: data
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elastic-password
                  key: data
            - name: ELASTIC_NODE
              valueFrom:
                secretKeyRef:
                  name: elastic-node
                  key: data
        # [END cloud_sql_proxy_k8s_secrets]

        # [START cloud_sql_proxy_k8s_container]
        - name: cloud-sql-proxy
          # It is recommended to use the latest version of the Cloud SQL Auth Proxy
          # Make sure to update on a regular schedule!
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.1.0
          args:
            # If connecting from a VPC-native GKE cluster, you can use the
            # following flag to have the proxy connect over private IP
            # - "--private-ip"

            # Enable structured logging with LogEntry format:
            - '--structured-logs'

            # Replace DB_PORT with the port the proxy should listen on
            - '--port=5432'
            - 'gmc-torino:us-central1:gmc-torino-postgres'

          securityContext:
            # The default Cloud SQL Auth Proxy image runs as the
            # "nonroot" user and group (uid: 65532) by default.
            runAsNonRoot: true
          # You should use resource requests/limits as a best practice to prevent
          # pods from consuming too many resources and affecting the execution of
          # other pods. You should adjust the following values based on what your
          # application needs. For details, see
          # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              memory: '512Mi'
              cpu: '500m'
            # requests:
            #   # The proxy's memory use scales linearly with the number of active
            #   # connections. Fewer open connections will use less memory. Adjust
            #   # this value based on your application's requirements.
            #   memory: '2Gi'
            #   # The proxy's CPU use scales linearly with the amount of IO between
            #   # the database and the application. Adjust this value based on your
            #   # application's requirements.
            #   cpu: '1'
